[![N|Solid](https://i.imgur.com/rUMbDaZ.png)](https://cyberlabs.com.br)  

# **How to setup Pyinstaller on Windows**
This tutorial was designed to help others setting up the environment necessary to run Pyinstaller on Windows 10, and also how to properly configure it.  
Brought to you by: [Cyberlabs](https://cyberlabs.com.br)  
Before you go googling about any issues, check the **Helpful Stuff** section

### I. Setting up
#### I.I Useful links:  
 
| Download | Link |
| - | - |
| Visual Code | [https://code.visualstudio.com/](https://code.visualstudio.com/) |
| Windows SDK | [https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk](https://developer.microsoft.com/en-US/windows/downloads/windows-10-sdk) |
| Python 3.6.4 | [https://www.python.org/ftp/python/3.6.4/python-3.6.4.exe](https://www.python.org/ftp/python/3.6.4/python-3.6.4.exe) |
| vc_redist | [https://www.microsoft.com/en-us/download/details.aspx?id=53587](https://www.microsoft.com/en-us/download/details.aspx?id=53587) |

For setting up Pyinstaller on Windows 10, you will need **vc_redist**, **Windows SDK** and some **python interpreter**.
We will be using **Python 3.6.4** on this tutorial

It is **highly recommended** to use **Visual Code**, but it is not **required**

#### I.II Installing:
| Software | Instruction |
| - | - |
| Visual Code | Just download the exe for Windows and just rush throught [Next] |
| Windows SDK | Just download the exe for Windows and just rush throught [Next] |
| Python 3.6.4 | Download the exe, and make sure to check the box [ Add to PATH ] |
| vc_redist | Just download the exe for Windows and just rush throught [Next] |

#### I.III Python Environment
If you are not using yet, it is highly recommended to use a **Python Environment**.
Check the **Helpful Stuff** section if you need to set up your Python Environment.

#### I.IV Installing Pyinstaller
Open the Command Prompt, activate your virtualenv if you have one, and run:
```bat
python -m pip install --upgrade pip
pip install pyinstaller
```

### II. Generating and Configuring the Spec File

#### II.I What is the .spec file
The .spec file is a file generated by pyinstaller to configure your project.  
Pyinstaller automatically detects all your project's dependencies and copy/paste them for you. But there are some some files (for multiple reasons) that Pyinstaller can't locate, and if that's the case for your project, you will need to change your project's configuration, in short, edit your .spec  

Also, Pyinstaller can't locate data files ( images, videos, etc...) that are loaded by the program.  
As such, it is necessary to inform pyinstaller, through the .spec, what other files you need to bundle together with your application

#### II.II Generate the .spec file
Let's say you have a main.py, and you want to generate an executable out of it  
To generate the .spec file, run:
```bat
pyinstaller --onedir main.py
```
This command will generate 2 directories and 1 file:
- build
- dist
- main.spec

Inside the **dist** directory, you will find another directory called **main**, and inside it, multiple files. And amoung those files, you will find **main.exe**
**Beware** that this **main.exe** file was created using pyinstaller default's configuration, so depending on the sophistication of your code, you might receive some errors when running the executable.  
On simple projects, such a standart Hello World, the pyinstaller default's configuration will suffice.

#### II.III Spec File Structure 

Here's a sample 
```.py
a = Analysis([main.py'],
             pathex=[project_path + 'build\\pyinstaller'],
             binaries=[],
             datas=[],
             hiddenimports=[],
             hookspath=[],
             runtime_hooks=[],
             excludes=[],
             win_no_prefer_redirects=False,
             win_private_assemblies=False,
             cipher=block_cipher)
pyz = PYZ(a.pure, a.zipped_data,
             cipher=block_cipher)
exe = EXE(pyz,
          a.scripts,
          exclude_binaries=True,
          name=MAIN_FILE,
          debug=False,
          strip=False,
          upx=True,
          console=True
          )
coll = COLLECT(exe,
               a.binaries,
               a.zipfiles,
               a.datas,
               strip=False,
               upx=True,
               name=main)
```

| Field | Structure | Description | Example
| - | - | - | -
| Analysis.pathex |  Array of Strings | Paths to where Pyinstaller should look for code dependencies | pathex = ['C:\\path1', 'C:\\Folder\\path2']
| Analysis.data | Arrays of Tuplets | Paths to where the data is, and where it will be when generating the executable | data = [('file.txt','.'),('dir\\file.txt','.\\dir')]
| EXE.console | Boolean(True or False) | If set to True, the executable will run without opening a Command Prompt | console=True **or** console=False  
| EXE.icon | String | Path to the Icon* | icon='C\\..\\..\\logo.icon'

#### II.IV In-Depth Explanation: Data Structures
As previously mentioned, if your program needs, for example, to read a certain text file. We need to tell Pyinstaller to copy this file to the **dist/projectname** directory, otherwise it won't be found

To add data files to your project, you need to edit the Analysis.data variable.

Lets create this sample structure here:
<pre>Sample Structure   
		┬  
		├ main.py
		├ data
			┬
			├ file2.txt
			└ file3.txt
 		├ file1.txt
  </pre>  

In this scenario, main.py needs file1 to file3 to run properly, and, as such, we would like to copy it automatically when generating an executable.

a.data's structure follow this rule, for each file or bundle of files you want to add will add a **()** such as:
```.spec
('path_to_file_origin', 'path_to_directory')
```
**[NOTE]:** One field points to a **file** and the other points to a **directory**

a.data will become something like this:
```.spec
a.Analysis(
		...
		a.data = [('data\\file2.txt','.\\data'),('data\\file3.txt','.\\data'),('file1.txt','.')],
		...
)
```
For adding **both** file2.txt and file3.txt at once:
```.spec
a.Analysis(
		...
		a.data = [('data\\*.txt','.\\data'),('file1.txt','.')],
		...
)
```

**What is going on here?**
file1.txt is at the **root*** directory
file2.txt is at data
file3.txt is at data

**root*** directory = the directory the .spec file is at

When generating the executable, we want to copy those files, **the exact** same way to **root/dist/main** so the executable can find those files the exact same way it always have

So, for file1.txt we want to copy it from the **root**, and paste it on **root/dist/main**.
The code used for that is: 
```.spec
('file1.txt', '.')
```
**.** is the same as **root/dist/main**

With file2.txt and file3.txt, we want to copy them from **root/data** to **root/dist/main/data** (or **./data**)
The code used for that is:
```.spec
('data\\file2.txt', '.\\data'),
('data\\file3.txt', '.\\data')
```
or
```.spec
('data\\*', '.\\data')
```

**[NOTE]:** The use **\\** instead of **/** is required. If you copy paste the path from some folder, make sure that the path is changed to fit this format.

#### II.V In-Depth Explanation: Icons
Every application has an icon, to add an icon to your program, just add the following line of code under EXE, inside the .spec file
```.spec
exe = EXE(
          ...
          icon="C:\\Path\\to\\your\\icon.ico"
          ...
          )
```
I'm not sure if it works with files types other than .ico, needs more testing.

#### II.VI Rebuilding after updating .spec
After you have thoroughly edited your .spec file, you can rebuild your executable with the new configurations. To do that, run on your Command Prompt:
```.bat
pyinstaller main.spec
```

### III. Common Errors and Solutions

#### III.I Using Scipy
Scipy is a python library that used C/C++ compiled dlls, as such, when going through your project's dependencies, Pyinstaller fails to find all dlls it should  
  
To fix that:
**1. Edit your main.py**
Add anywhere:
```.py
from scipy import optimize
```
  
**2. Edit your main.spec**
Locate your virtualenv environment's path.  
**Default:** C:\User\xxxxxxx\Envs  

Edit your Analysis.pathex, from:
```.spec
a.Analysis(
		...
		a.pathex = ['Whatever is here'],
		...
)
```
to
```.spec
env_path = 'C:\\Path\\to\\your\\virtual\\env'
a.Analysis(
		...
		a.pathex = ['Whatever is here',
		env_path + 'Lib\\site-packages\\scipy\\extra-dll',
		env_path + 'Lib\\site-packages\\scipy\\optimize'
		],
		...
)
```

# Helpful Stuff
  
## **-- Setting up Python's Virtual Environment**  
Open the Command Prompt.  
Make sure Python is correctly added to System's Path  
Install python's virtualenv by running the following code:  
```.bat
python -m install --upgrade pip
pip install virtualenv virtualenvwrapper-win
```  
  
Now create your own Python's Virtual Environment by running **(edit it first)**:  
```.bat
mkvirtualenv nameofmyenvironment --python=Path\to\Python\python.exe
```  
  
**HINT**: To locate your python.exe, on your Command Prompt, run:  
```.bat
where python
```  
  
  ## **-- Activating Python's Virtual Environment**  
  If you already have a Virtual Environment working correctly, you will notice that when opening a new Command Prompt, it will not automatically start your environment, for that you will need to run:
  ```.bat
  workon nameofmyenvironment
  ```

  If you forgot your environment's name, just run:
  ```.bat
  workon
  ```
  ## **-- Opening Command Prompt**  
  The easiest way to open the Command Prompt on windows is by hitting the: **Win + R** keys.  
  Which will open a Prompt. Inside it, write: **cmd** and hit Enter
